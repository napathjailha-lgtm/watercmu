// src/components/ReportsAnalytics.js
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';

function ReportsAnalytics({ user, currentVillage }) {
  const [activeReport, setActiveReport] = useState('waterUsage');
  const [periodType, setPeriodType] = useState('monthly');
  const [dataPeriod, setDataPeriod] = useState({
    month: 5, // ‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°
    year: 2025,
    quarter: 2, // ‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 2
    startDate: '2025-04-01',
    endDate: '2025-05-06'
  });
  
  const [waterUsageData] = useState([
    { month: '‡∏°.‡∏Ñ.', usage: 2850, income: 85500 },
    { month: '‡∏Å.‡∏û.', usage: 2720, income: 81600 },
    { month: '‡∏°‡∏µ.‡∏Ñ.', usage: 2950, income: 88500 },
    { month: '‡πÄ‡∏°.‡∏¢.', usage: 3100, income: 93000 },
    { month: '‡∏û.‡∏Ñ.', usage: 0, income: 0 } // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  ]);
  
  const [userUsageData] = useState([
    { id: 1, meterNumber: 'MT-1042', resident: '‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', usage: 15, amount: 450 },
    { id: 2, meterNumber: 'MT-1043', resident: '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ô‡∏†‡∏≤ ‡∏£‡∏±‡∏Å‡∏î‡∏µ', usage: 17, amount: 510 },
    { id: 3, meterNumber: 'MT-1044', resident: '‡∏ô‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á', usage: 0, amount: 100 },
    { id: 4, meterNumber: 'MT-1045', resident: '‡∏ô‡∏≤‡∏á‡∏ß‡∏¥‡∏°‡∏• ‡∏™‡∏∏‡∏Ç‡πÉ‡∏à', usage: 12, amount: 360 },
    { id: 5, meterNumber: 'MT-1046', resident: '‡∏ô‡∏≤‡∏¢‡∏û‡∏¥‡∏ä‡∏±‡∏¢ ‡∏ô‡∏≥‡∏ä‡∏±‡∏¢', usage: 18, amount: 540 }
  ]);
  
  const [billingData] = useState([
    { month: '‡∏°.‡∏Ñ.', billed: 85500, collected: 82000, pending: 3500 },
    { month: '‡∏Å.‡∏û.', billed: 81600, collected: 80100, pending: 1500 },
    { month: '‡∏°‡∏µ.‡∏Ñ.', billed: 88500, collected: 85200, pending: 3300 },
    { month: '‡πÄ‡∏°.‡∏¢.', billed: 93000, collected: 89000, pending: 4000 },
    { month: '‡∏û.‡∏Ñ.', billed: 0, collected: 0, pending: 0 } // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  ]);
  
  const [maintenanceData] = useState([
    { month: '‡∏°.‡∏Ñ.', pumps: 1500, chlorinator: 800, pipes: 0, other: 0, total: 2300 },
    { month: '‡∏Å.‡∏û.', pumps: 0, chlorinator: 500, pipes: 1200, other: 0, total: 1700 },
    { month: '‡∏°‡∏µ.‡∏Ñ.', pumps: 0, chlorinator: 500, pipes: 0, other: 600, total: 1100 },
    { month: '‡πÄ‡∏°.‡∏¢.', pumps: 1500, chlorinator: 500, pipes: 2500, other: 0, total: 4500 },
    { month: '‡∏û.‡∏Ñ.', pumps: 0, chlorinator: 800, pipes: 0, other: 0, total: 800 }
  ]);
  
  const [isLoading, setIsLoading] = useState(true);
  
  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 800);
    return () => clearTimeout(timer);
  }, [activeReport, periodType, dataPeriod]);
  
  const months = [
    '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
    '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
  ];
  
  const quarters = [
    '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 1 (‡∏°.‡∏Ñ. - ‡∏°‡∏µ.‡∏Ñ.)',
    '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 2 (‡πÄ‡∏°.‡∏¢. - ‡∏°‡∏¥.‡∏¢.)',
    '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 3 (‡∏Å.‡∏Ñ. - ‡∏Å.‡∏¢.)',
    '‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ó‡∏µ‡πà 4 (‡∏ï.‡∏Ñ. - ‡∏ò.‡∏Ñ.)'
  ];
  
  const handleMonthChange = (e) => {
    setIsLoading(true);
    setDataPeriod(prev => ({
      ...prev,
      month: parseInt(e.target.value)
    }));
  };
  
  const handleYearChange = (e) => {
    setIsLoading(true);
    setDataPeriod(prev => ({
      ...prev,
      year: parseInt(e.target.value)
    }));
  };
  
  const handleQuarterChange = (e) => {
    setIsLoading(true);
    setDataPeriod(prev => ({
      ...prev,
      quarter: parseInt(e.target.value)
    }));
  };
  
  const handleStartDateChange = (e) => {
    setIsLoading(true);
    setDataPeriod(prev => ({
      ...prev,
      startDate: e.target.value
    }));
  };
  
  const handleEndDateChange = (e) => {
    setIsLoading(true);
    setDataPeriod(prev => ({
      ...prev,
      endDate: e.target.value
    }));
  };
  
  const handlePeriodTypeChange = (type) => {
    setIsLoading(true);
    setPeriodType(type);
  };
  
  const handleReportChange = (reportType) => {
    setIsLoading(true);
    setActiveReport(reportType);
  };
  
  const getTotalWaterUsage = () => {
    return waterUsageData.reduce((total, month) => total + month.usage, 0);
  };
  
  const getTotalIncome = () => {
    return waterUsageData.reduce((total, month) => total + month.income, 0);
  };
  
  const getAverageWaterUsage = () => {
    const months = waterUsageData.filter(month => month.usage > 0).length;
    if (months === 0) return 0;
    return getTotalWaterUsage() / months;
  };
  
  const getTotalCollected = () => {
    return billingData.reduce((total, month) => total + month.collected, 0);
  };
  
  const getTotalPending = () => {
    return billingData.reduce((total, month) => total + month.pending, 0);
  };
  
  const getCollectionRate = () => {
    const totalBilled = billingData.reduce((total, month) => total + month.billed, 0);
    if (totalBilled === 0) return 0;
    return (getTotalCollected() / totalBilled) * 100;
  };
  
  const getTotalMaintenanceCost = () => {
    return maintenanceData.reduce((total, month) => total + month.total, 0);
  };
  
  const formatNumber = (num) => {
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  };
  
  const renderWaterUsageReport = () => {
    return (
      <div className="report-content">
        <div className="report-summary">
          <div className="summary-card">
            <div className="summary-icon">üíß</div>
            <div className="summary-info">
              <div className="summary-title">‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
              <div className="summary-value">{formatNumber(getTotalWaterUsage())} ‡∏•‡∏ö.‡∏°.</div>
            </div>
          </div>
          <div className="summary-card">
            <div className="summary-icon">üìä</div>
            <div className="summary-info">
              <div className="summary-title">‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</div>
              <div className="summary-value">{getAverageWaterUsage().toFixed(2)} ‡∏•‡∏ö.‡∏°.</div>
            </div>
          </div>
          <div className="summary-card">
            <div className="summary-icon">üí∞</div>
            <div className="summary-info">
              <div className="summary-title">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
              <div className="summary-value">‡∏ø{formatNumber(getTotalIncome())}</div>
            </div>
          </div>
        </div>
        
        <div className="chart-container">
          <h3>‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h3>
          <div className="bar-chart">
            {waterUsageData.map((month, index) => (
              <div key={index} className="chart-column">
                <div className="chart-bar-container">
                  <div 
                    className="chart-bar usage-bar" 
                    style={{ height: `${(month.usage / 3200) * 200}px` }}
                  >
                    <span className="bar-value">{formatNumber(month.usage)}</span>
                  </div>
                </div>
                <div className="chart-label">{month.month}</div>
              </div>
            ))}
          </div>
          <div className="chart-legend">
            <div className="legend-item">
              <div className="legend-color usage-color"></div>
              <div className="legend-label">‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥ (‡∏•‡∏ö.‡∏°.)</div>
            </div>
          </div>
        </div>
        
        <div className="chart-container">
          <h3>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h3>
          <div className="bar-chart">
            {waterUsageData.map((month, index) => (
              <div key={index} className="chart-column">
                <div className="chart-bar-container">
                  <div 
                    className="chart-bar income-bar" 
                    style={{ height: `${(month.income / 95000) * 200}px` }}
                  >
                    <span className="bar-value">‡∏ø{formatNumber(month.income)}</span>
                  </div>
                </div>
                <div className="chart-label">{month.month}</div>
              </div>
            ))}
          </div>
          <div className="chart-legend">
            <div className="legend-item">
              <div className="legend-color income-color"></div>
              <div className="legend-label">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏ö‡∏≤‡∏ó)</div>
            </div>
          </div>
        </div>
        
        <div className="data-table-container">
          <div className="table-header">
            <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h3>
            <div className="table-actions">
              <button className="btn-export">
                <span className="icon">üì•</span> ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
              </button>
            </div>
          </div>
          <div className="table-responsive">
            <table className="data-table">
              <thead>
                <tr>
                  <th>‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</th>
                  <th>‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥ (‡∏•‡∏ö.‡∏°.)</th>
                  <th>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏ö‡∏≤‡∏ó)</th>
                </tr>
              </thead>
              <tbody>
                {waterUsageData.map((month, index) => (
                  <tr key={index}>
                    <td>{month.month}</td>
                    <td>{formatNumber(month.usage)}</td>
                    <td>‡∏ø{formatNumber(month.income)}</td>
                  </tr>
                ))}
              </tbody>
              <tfoot>
                <tr>
                  <th>‡∏£‡∏ß‡∏°</th>
                  <th>{formatNumber(getTotalWaterUsage())} ‡∏•‡∏ö.‡∏°.</th>
                  <th>‡∏ø{formatNumber(getTotalIncome())}</th>
                </tr>
              </tfoot>
            </table>
          </div>
        </div>
      </div>
    );
  };
  
  const renderUserUsageReport = () => {
    const totalUsage = userUsageData.reduce((total, user) => total + user.usage, 0);
    const totalAmount = userUsageData.reduce((total, user) => total + user.amount, 0);
    
    return (
      <div className="report-content">
        <div className="report-summary">
          <div className="summary-card">
            <div className="summary-icon">üë•</div>
            <div className="summary-info">
              <div className="summary-title">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
              <div className="summary-value">{userUsageData.length} ‡∏£‡∏≤‡∏¢</div>
            </div>
          </div>
          <div className="summary-card">
            <div className="summary-icon">üíß</div>
            <div className="summary-info">
              <div className="summary-title">‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
              <div className="summary-value">{formatNumber(totalUsage)} ‡∏•‡∏ö.‡∏°.</div>
            </div>
          </div>
          <div className="summary-card">
            <div className="summary-icon">üí∞</div>
            <div className="summary-info">
              <div className="summary-title">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
              <div className="summary-value">‡∏ø{formatNumber(totalAmount)}</div>
            </div>
          </div>
        </div>
        
        <div className="chart-container">
          <h3>‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•</h3>
          <div className="bar-chart user-chart">
            {userUsageData.map((user, index) => (
              <div key={index} className="chart-column">
                <div className="chart-bar-container">
                  <div 
                    className="chart-bar usage-bar" 
                    style={{ height: `${(user.usage / 20) * 200}px` }}
                  >
                    <span className="bar-value">{user.usage}</span>
                  </div>
                </div>
                <div className="chart-label" title={user.resident}>
                  {user.resident.split(' ')[0]}
                </div>
              </div>
            ))}
          </div>
        </div>
        
        <div className="data-table-container">
          <div className="table-header">
            <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•</h3>
            <div className="table-actions">
              <input 
                type="text" 
                placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠..." 
                className="search-input"
              />
              <button className="btn-export">
                <span className="icon">üì•</span> ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
              </button>
            </div>
          </div>
          <div className="table-responsive">
            <table className="data-table">
              <thead>
                <tr>
                  <th>‡πÄ‡∏•‡∏Ç‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå</th>
                  <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥</th>
                  <th>‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥ (‡∏•‡∏ö.‡∏°.)</th>
                  <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)</th>
                </tr>
              </thead>
              <tbody>
                {userUsageData.map(user => (
                  <tr key={user.id}>
                    <td>{user.meterNumber}</td>
                    <td>{user.resident}</td>
                    <td>{user.usage}</td>
                    <td>‡∏ø{formatNumber(user.amount)}</td>
                  </tr>
                ))}
              </tbody>
              <tfoot>
                <tr>
                  <th colSpan="2">‡∏£‡∏ß‡∏°</th>
                  <th>{formatNumber(totalUsage)} ‡∏•‡∏ö.‡∏°.</th>
                  <th>‡∏ø{formatNumber(totalAmount)}</th>
                </tr>
              </tfoot>
            </table>
          </div>
        </div>
      </div>
    );
  };
  
  const renderBillingReport = () => {
    return (
      <div className="report-content">
        <div className="report-summary">
          <div className="summary-card">
            <div className="summary-icon">üìã</div>
            <div className="summary-info">
              <div className="summary-title">‡∏¢‡∏≠‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
              <div className="summary-value">‡∏ø{formatNumber(billingData.reduce((total, month) => total + month.billed, 0))}</div>
            </div>
          </div>
          <div className="summary-card">
            <div className="summary-icon">‚úÖ</div>
            <div className="summary-info">
              <div className="summary-title">‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß</div>
              <div className="summary-value">‡∏ø{formatNumber(getTotalCollected())}</div>
            </div>
          </div>
          <div className="summary-card">
            <div className="summary-icon">‚ö†Ô∏è</div>
            <div className="summary-info">
              <div className="summary-title">‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞</div>
              <div className="summary-value">‡∏ø{formatNumber(getTotalPending())}</div>
            </div>
          </div>
          <div className="summary-card">
            <div className="summary-icon">üìä</div>
            <div className="summary-info">
              <div className="summary-title">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô</div>
              <div className="summary-value">{getCollectionRate().toFixed(2)}%</div>
            </div>
          </div>
        </div>
        
        <div className="chart-container">
          <h3>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h3>
          <div className="stacked-bar-chart">
            {billingData.map((month, index) => (
              <div key={index} className="chart-column">
                <div className="chart-bar-container">
                  <div className="stacked-bar">
                    <div 
                      className="chart-bar collected-bar" 
                      style={{ height: `${(month.collected / 100000) * 200}px` }}
                      title={`‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß: ‡∏ø${formatNumber(month.collected)}`}
                    >
                    </div>
                    <div 
                      className="chart-bar pending-bar" 
                      style={{ height: `${(month.pending / 100000) * 200}px` }}
                      title={`‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞: ‡∏ø${formatNumber(month.pending)}`}
                    >
                    </div>
                  </div>
                  <div className="stacked-bar-labels">
                    <div className="collected-label">‡∏ø{formatNumber(month.collected)}</div>
                    <div className="pending-label">‡∏ø{formatNumber(month.pending)}</div>
                  </div>
                </div>
                <div className="chart-label">{month.month}</div>
              </div>
            ))}
          </div>
          <div className="chart-legend">
            <div className="legend-item">
              <div className="legend-color collected-color"></div>
              <div className="legend-label">‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß</div>
            </div>
            <div className="legend-item">
              <div className="legend-color pending-color"></div>
              <div className="legend-label">‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞</div>
            </div>
          </div>
        </div>
        
        <div className="data-table-container">
          <div className="table-header">
            <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h3>
            <div className="table-actions">
              <button className="btn-export">
                <span className="icon">üì•</span> ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
              </button>
            </div>
          </div>
          <div className="table-responsive">
            <table className="data-table">
              <thead>
                <tr>
                  <th>‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</th>
                  <th>‡∏¢‡∏≠‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Å‡πá‡∏ö (‡∏ö‡∏≤‡∏ó)</th>
                  <th>‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß (‡∏ö‡∏≤‡∏ó)</th>
                  <th>‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞ (‡∏ö‡∏≤‡∏ó)</th>
                  <th>‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô</th>
                </tr>
              </thead>
              <tbody>
                {billingData.map((month, index) => (
                  <tr key={index}>
                    <td>{month.month}</td>
                    <td>‡∏ø{formatNumber(month.billed)}</td>
                    <td>‡∏ø{formatNumber(month.collected)}</td>
                    <td>‡∏ø{formatNumber(month.pending)}</td>
                    <td>
                      <div className="progress-bar">
                        <div 
                          className="progress-value" 
                          style={{ width: `${month.billed > 0 ? (month.collected / month.billed) * 100 : 0}%` }}
                        ></div>
                        <span>
                          {month.billed > 0 ? ((month.collected / month.billed) * 100).toFixed(2) : '0'}%
                        </span>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
              <tfoot>
                <tr>
                  <th>‡∏£‡∏ß‡∏°</th>
                  <th>‡∏ø{formatNumber(billingData.reduce((total, month) => total + month.billed, 0))}</th>
                  <th>‡∏ø{formatNumber(getTotalCollected())}</th>
                  <th>‡∏ø{formatNumber(getTotalPending())}</th>
                  <th>{getCollectionRate().toFixed(2)}%</th>
                </tr>
              </tfoot>
            </table>
          </div>
        </div>
      </div>
    );
  };
  
  const renderMaintenanceReport = () => {
    return (
      <div className="report-content">
        <div className="report-summary">
          <div className="summary-card">
            <div className="summary-icon">üîß</div>
            <div className="summary-info">
              <div className="summary-title">‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
              <div className="summary-value">‡∏ø{formatNumber(getTotalMaintenanceCost())}</div>
            </div>
          </div>
          <div className="summary-card">
            <div className="summary-icon">‚öôÔ∏è</div>
            <div className="summary-info">
              <div className="summary-title">‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏π‡∏ö‡∏ô‡πâ‡∏≥</div>
              <div className="summary-value">‡∏ø{formatNumber(maintenanceData.reduce((total, month) => total + month.pumps, 0))}</div>
            </div>
          </div>
          <div className="summary-card">
            <div className="summary-icon">üß™</div>
            <div className="summary-info">
              <div className="summary-title">‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡∏ô</div>
              <div className="summary-value">‡∏ø{formatNumber(maintenanceData.reduce((total, month) => total + month.chlorinator, 0))}</div>
            </div>
          </div>
          <div className="summary-card">
            <div className="summary-icon">üö∞</div>
            <div className="summary-info">
              <div className="summary-title">‡∏ó‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏•‡πå‡∏ß</div>
              <div className="summary-value">‡∏ø{formatNumber(maintenanceData.reduce((total, month) => total + month.pipes, 0))}</div>
            </div>
          </div>
        </div>
        
        <div className="chart-row">
          <div className="chart-container half-width">
            <h3>‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h3>
            <div className="bar-chart">
              {maintenanceData.map((month, index) => (
                <div key={index} className="chart-column">
                  <div className="chart-bar-container">
                    <div 
                      className="chart-bar maintenance-bar" 
                      style={{ height: `${(month.total / 5000) * 200}px` }}
                    >
                      <span className="bar-value">‡∏ø{formatNumber(month.total)}</span>
                    </div>
                  </div>
                  <div className="chart-label">{month.month}</div>
                </div>
              ))}
            </div>
          </div>
          
          <div className="chart-container half-width">
            <h3>‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</h3>
            <div className="pie-chart-container">
              <div className="pie-chart">
                <div className="pie-segment pumps" style={{ transform: 'rotate(0deg)', clipPath: 'polygon(50% 50%, 50% 0%, 100% 0%, 100% 100%, 50% 100%)' }}></div>
                <div className="pie-segment chlorinator" style={{ transform: 'rotate(120deg)', clipPath: 'polygon(50% 50%, 50% 0%, 100% 0%, 100% 50%)' }}></div>
                <div className="pie-segment pipes" style={{ transform: 'rotate(180deg)', clipPath: 'polygon(50% 50%, 50% 0%, 100% 0%, 100% 50%)' }}></div>
                <div className="pie-segment other" style={{ transform: 'rotate(270deg)', clipPath: 'polygon(50% 50%, 50% 0%, 75% 0%)' }}></div>
              </div>
              <div className="chart-legend pie-legend">
                <div className="legend-item">
                  <div className="legend-color pumps-color"></div>
                  <div className="legend-label">‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏π‡∏ö‡∏ô‡πâ‡∏≥: ‡∏ø{formatNumber(maintenanceData.reduce((total, month) => total + month.pumps, 0))}</div>
                </div>
                <div className="legend-item">
                  <div className="legend-color chlorinator-color"></div>
                  <div className="legend-label">‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡∏ô: ‡∏ø{formatNumber(maintenanceData.reduce((total, month) => total + month.chlorinator, 0))}</div>
                </div>
                <div className="legend-item">
                  <div className="legend-color pipes-color"></div>
                  <div className="legend-label">‡∏ó‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏•‡πå‡∏ß: ‡∏ø{formatNumber(maintenanceData.reduce((total, month) => total + month.pipes, 0))}</div>
                </div>
                <div className="legend-item">
                  <div className="legend-color other-color"></div>
                  <div className="legend-label">‡∏≠‡∏∑‡πà‡∏ô‡πÜ: ‡∏ø{formatNumber(maintenanceData.reduce((total, month) => total + month.other, 0))}</div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div className="data-table-container">
          <div className="table-header">
            <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h3>
            <div className="table-actions">
              <button className="btn-export">
                <span className="icon">üì•</span> ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
              </button>
            </div>
          </div>
          <div className="table-responsive">
            <table className="data-table">
              <thead>
                <tr>
                  <th>‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</th>
                  <th>‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏π‡∏ö‡∏ô‡πâ‡∏≥ (‡∏ö‡∏≤‡∏ó)</th>
                  <th>‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡∏ô (‡∏ö‡∏≤‡∏ó)</th>
                  <th>‡∏ó‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏•‡πå‡∏ß (‡∏ö‡∏≤‡∏ó)</th>
                  <th>‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏ö‡∏≤‡∏ó)</th>
                  <th>‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)</th>
                </tr>
              </thead>
              <tbody>
                {maintenanceData.map((month, index) => (
                  <tr key={index}>
                    <td>{month.month}</td>
                    <td>‡∏ø{formatNumber(month.pumps)}</td>
                    <td>‡∏ø{formatNumber(month.chlorinator)}</td>
                    <td>‡∏ø{formatNumber(month.pipes)}</td>
                    <td>‡∏ø{formatNumber(month.other)}</td>
                    <td>‡∏ø{formatNumber(month.total)}</td>
                  </tr>
                ))}
              </tbody>
              <tfoot>
                <tr>
                  <th>‡∏£‡∏ß‡∏°</th>
                  <th>‡∏ø{formatNumber(maintenanceData.reduce((total, month) => total + month.pumps, 0))}</th>
                  <th>‡∏ø{formatNumber(maintenanceData.reduce((total, month) => total + month.chlorinator, 0))}</th>
                  <th>‡∏ø{formatNumber(maintenanceData.reduce((total, month) => total + month.pipes, 0))}</th>
                  <th>‡∏ø{formatNumber(maintenanceData.reduce((total, month) => total + month.other, 0))}</th>
                  <th>‡∏ø{formatNumber(getTotalMaintenanceCost())}</th>
                </tr>
              </tfoot>
            </table>
          </div>
        </div>
      </div>
    );
  };
  
  const renderReportContent = () => {
    if (isLoading) {
      return (
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <div className="loading-text">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>
        </div>
      );
    }
    
    switch(activeReport) {
      case 'waterUsage':
        return renderWaterUsageReport();
      case 'userUsage':
        return renderUserUsageReport();
      case 'billing':
        return renderBillingReport();
      case 'maintenance':
        return renderMaintenanceReport();
      default:
        return renderWaterUsageReport();
    }
  };
  
  return (
    <div className="reports-container">
      <header className="page-header">
        <div className="header-content">
          <Link to="/" className="back-link">‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</Link>
          <h1>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</h1>
        </div>
        <div className="header-actions">
          {currentVillage && (
            <div className="current-village">
              <span>‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô:</span> 
              <span className="village-name">{currentVillage.name}</span>
            </div>
          )}
          <button className="print-btn">
            <span className="icon">üñ®Ô∏è</span> ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
          </button>
        </div>
      </header>
      
      <div className="reports-content">
        <aside className="reports-sidebar">
          <div className="reports-nav">
            <h3>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</h3>
            <ul>
              <li>
                <button 
                  className={`report-nav-btn ${activeReport === 'waterUsage' ? 'active' : ''}`}
                  onClick={() => handleReportChange('waterUsage')}
                >
                  <span className="nav-icon">üíß</span> ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏£‡∏ß‡∏°
                </button>
              </li>
              <li>
                <button 
                  className={`report-nav-btn ${activeReport === 'userUsage' ? 'active' : ''}`}
                  onClick={() => handleReportChange('userUsage')}
                >
                  <span className="nav-icon">üë•</span> ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
                </button>
              </li>
              <li>
                <button 
                  className={`report-nav-btn ${activeReport === 'billing' ? 'active' : ''}`}
                  onClick={() => handleReportChange('billing')}
                >
                  <span className="nav-icon">üí∞</span> ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
                </button>
              </li>
              <li>
                <button 
                  className={`report-nav-btn ${activeReport === 'maintenance' ? 'active' : ''}`}
                  onClick={() => handleReportChange('maintenance')}
                >
                  <span className="nav-icon">üîß</span> ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤
                </button>
              </li>
            </ul>
            
            <h3>‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤</h3>
            <div className="period-selector">
              <div className="period-type-tabs">
                <button 
                  className={`period-tab ${periodType === 'monthly' ? 'active' : ''}`}
                  onClick={() => handlePeriodTypeChange('monthly')}
                >
                  ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                </button>
                <button 
                  className={`period-tab ${periodType === 'quarterly' ? 'active' : ''}`}
                  onClick={() => handlePeriodTypeChange('quarterly')}
                >
                  ‡∏£‡∏≤‡∏¢‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™
                </button>
                <button 
                  className={`period-tab ${periodType === 'custom' ? 'active' : ''}`}
                  onClick={() => handlePeriodTypeChange('custom')}
                >
                  ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
                </button>
              </div>
              
              {periodType === 'monthly' && (
                <div className="period-inputs">
                  <select value={dataPeriod.month} onChange={handleMonthChange} className="select-styled">
                    {months.map((month, index) => (
                      <option key={index} value={index + 1}>{month}</option>
                    ))}
                  </select>
                  <select value={dataPeriod.year} onChange={handleYearChange} className="select-styled">
                    <option value={2024}>2024</option>
                    <option value={2025}>2025</option>
                  </select>
                </div>
              )}
              
              {periodType === 'quarterly' && (
                <div className="period-inputs">
                  <select value={dataPeriod.quarter} onChange={handleQuarterChange} className="select-styled">
                    {quarters.map((quarter, index) => (
                      <option key={index} value={index + 1}>{quarter}</option>
                    ))}
                  </select>
                  <select value={dataPeriod.year} onChange={handleYearChange} className="select-styled">
                    <option value={2024}>2024</option>
                    <option value={2025}>2025</option>
                  </select>
                </div>
              )}
              
              {periodType === 'custom' && (
                <div className="period-inputs custom-period">
                  <div className="date-input">
                    <label>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:</label>
                    <input 
                      type="date" 
                      value={dataPeriod.startDate} 
                      onChange={handleStartDateChange}
                      className="date-picker"
                    />
                  </div>
                  <div className="date-input">
                    <label>‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:</label>
                    <input 
                      type="date" 
                      value={dataPeriod.endDate} 
                      onChange={handleEndDateChange}
                      className="date-picker"
                    />
                  </div>
                </div>
              )}
            </div>
            
            <div className="export-options">
              <h3>‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h3>
              <button className="export-btn">
                <span className="icon">üìä</span> ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô Excel
              </button>
              <button className="export-btn">
                <span className="icon">üìÑ</span> ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô PDF
              </button>
            </div>
          </div>
        </aside>
        
        <main className="report-main">
          <div className="report-header">
            <h2>
              {activeReport === 'waterUsage' && '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏£‡∏ß‡∏°'}
              {activeReport === 'userUsage' && '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•'}
              {activeReport === 'billing' && '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô'}
              {activeReport === 'maintenance' && '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤'}
            </h2>
            <div className="report-period">
              {periodType === 'monthly' && `‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${months[dataPeriod.month - 1]} ${dataPeriod.year}`}
              {periodType === 'quarterly' && `${quarters[dataPeriod.quarter - 1]} ‡∏õ‡∏µ ${dataPeriod.year}`}
              {periodType === 'custom' && `‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${dataPeriod.startDate} ‡∏ñ‡∏∂‡∏á ${dataPeriod.endDate}`}
            </div>
          </div>
          
          {renderReportContent()}
        </main>
      </div>
    </div>
  );
}

export default ReportsAnalytics;