// src/components/MainLayout.js
import React, { useState, useEffect, useCallback } from 'react';
import { Link, useLocation, Navigate } from 'react-router-dom';
import { userService, villageService } from '../services/api';
import eventBus from '../utils/eventBus';

function MainLayout({ user, onLogout, currentVillage, onVillageChange, children }) {
  const location = useLocation();
  const [villages, setVillages] = useState([]);
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
  const [menuItems, setMenuItems] = useState([]);
  const [shouldRedirect, setShouldRedirect] = useState(!user);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô - ‡πÉ‡∏ä‡πâ useCallback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô infinite loop
  const fetchVillages = useCallback(async () => {
    if (!user || !user.role_name) {
      console.log('No user or role_name, skipping village fetch');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      let response;

      if (user.role_name === 'village_admin') {
        console.log('Fetching villages for village_admin:', user.user_id);
        response = await userService.getUserById(user.user_id);

        if (response?.data?.data?.villages) {
          const villagesData = response.data.data.villages;
          console.log('Village admin villages:', villagesData);

          if (Array.isArray(villagesData) && villagesData.length > 0) {
            setVillages(villagesData);

            // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ currentVillage ‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏£‡∏Å
            if (!currentVillage && onVillageChange) {
              const firstVillage = villagesData[0];
              localStorage.setItem('currentVillage', JSON.stringify(firstVillage));
              onVillageChange(firstVillage);
              console.log('Set first village as current:', firstVillage);
            }
          } else {
            setVillages([]);
            console.warn('No villages found for village admin');
          }
        } else {
          setVillages([]);
          console.error('Invalid villages response format:', response);
        }

      } else if (user.role_name === 'admin') {
        response = await villageService.getVillages();

        if (response?.data?.data) {
          const villagesData = response.data.data;
          // console.log('Admin villages:', villagesData);

          if (Array.isArray(villagesData) && villagesData.length > 0) {
            setVillages(villagesData);

            // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ currentVillage ‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏£‡∏Å
            if (!currentVillage && onVillageChange) {
              const firstVillage = villagesData[0];
              localStorage.setItem('currentVillage', JSON.stringify(firstVillage));
              onVillageChange(firstVillage);
              console.log('Set first village as current for admin:', firstVillage);
            }
          } else {
            setVillages([]);
            console.warn('No villages found for admin');
          }
        } else {
          setVillages([]);
          console.error('Invalid villages response format:', response);
        }
      } else {
       console.log('Fetching villages for village_admin:', user.user_id);
        response = await userService.getUserById(user.user_id);

        if (response?.data?.data?.villages) {
          const villagesData = response.data.data.villages;
          console.log('Village admin villages:', villagesData);

          if (Array.isArray(villagesData) && villagesData.length > 0) {
            setVillages(villagesData);

            // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ currentVillage ‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏£‡∏Å
            if (!currentVillage && onVillageChange) {
              const firstVillage = villagesData[0];
              localStorage.setItem('currentVillage', JSON.stringify(firstVillage));
              onVillageChange(firstVillage);
              console.log('Set first village as current:', firstVillage);
            }
          } else {
            setVillages([]);
            console.warn('No villages found for village admin');
          }
        } else {
          setVillages([]);
          console.error('Invalid villages response format:', response);
        }
      }

    } catch (error) {
      console.error('Error fetching villages:', error);
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
      setVillages([]);
    } finally {
      setIsLoading(false);
    }
  }, [user, currentVillage, onVillageChange]);

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ fetchVillages ‡πÄ‡∏°‡∏∑‡πà‡∏≠ user ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    if (user) {

      fetchVillages();
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user ‡πÉ‡∏´‡πâ clear ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      setVillages([]);
      setShouldRedirect(true);
    }
  }, [user, fetchVillages]);

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ event bus ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô
  useEffect(() => {
    const handleVillagesUpdated = () => {
      console.log('Villages updated event received, refreshing data...');
      fetchVillages();
    };

    eventBus.on('villages-updated', handleVillagesUpdated);

    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢
    return () => {
      eventBus.remove('villages-updated', handleVillagesUpdated);
    };
  }, [fetchVillages]);

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  useEffect(() => {
    if (!user) {
      setShouldRedirect(true);
      return;
    }

    setShouldRedirect(false);
    let items = [];

    if (user.role_name === 'admin') {
      // ‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö
      items = [
        { path: '/', icon: 'üìä', text: '‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î' },
        { path: '/village-manage', icon: 'üè†', text: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô' },
        { path: '/village-settings', icon: 'üè†', text: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô' },
        { path: '/zone', icon: 'üí≥', text: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ã‡∏ô' },
        { path: '/water-meters', icon: 'üîå', text: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏Å‡∏≠‡∏≤‡∏®‡∏±‡∏¢' },
        { path: '/meter-readings', icon: 'üìù', text: '‡∏à‡∏î‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå / ‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ / ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô' },
        { path: '/billing', icon: 'üí∞', text: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏•' },
        { path: '/users', icon: 'üë•', text: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' }
      ];
    } else if (user.role_name === 'village_admin') {
      items = [
        { path: '/', icon: 'üìä', text: '‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î' },
        { path: '/village-settings', icon: 'üè†', text: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô' },
        { path: '/zone', icon: 'üí≥', text: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏ã‡∏ô' },
        { path: '/water-meters', icon: 'üîå', text: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏Å‡∏≠‡∏≤‡∏®‡∏±‡∏¢' },
        { path: '/meter-readings', icon: 'üìù', text: '‡∏à‡∏î‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå / ‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ / ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô' },
        { path: '/billing', icon: 'üí∞', text: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏•' },
        { path: '/users', icon: 'üë•', text: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' }
      ];
    } else if (user.role_name === 'meter') {
      // ‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏î‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
      items = [
        { path: '/', icon: 'üìä', text: '‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î' },
        { path: '/meter-readings', icon: 'üìù', text: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå' },
        { path: '/reports', icon: 'üìà', text: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô' }
      ];
    } else {
      // ‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥
      items = [
        { path: '/', icon: 'üìä', text: '‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å' },
        { path: '/billing', icon: 'üí∞', text: '‡∏ö‡∏¥‡∏•‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥' },
        { path: '/payments', icon: 'üí≥', text: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô' },
        { path: '/reports', icon: 'üìà', text: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥' }
      ];
    }

    setMenuItems(items);
  }, [user]);

  const handleVillageChange = (e) => {
    if (!onVillageChange) return;

    const villageId = parseInt(e.target.value);
    console.log("Village selected, ID:", villageId);
    const selectedVillage = villages.find(v => v.village_id === villageId);
    console.log("Selected village:", selectedVillage);

    if (selectedVillage) {
      localStorage.setItem('currentVillage', JSON.stringify(selectedVillage));
      onVillageChange(selectedVillage);
    }
  };

  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen);
  };

  // ‡∏Å‡∏≤‡∏£ redirect ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Hook ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
  if (shouldRedirect) {
    return <Navigate to="/login" replace />;
  }

  return (
    <div className="dashboard-container">
      <header className="dashboard-header">
        <div className="header-left">
          <button className="menu-toggle" onClick={toggleSidebar}>
            ‚ò∞
          </button>
          <h1>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡∏õ‡∏≤</h1>
        </div>
        <div className="user-controls">
          {/* ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin - ‡πÅ‡∏™‡∏î‡∏á dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô */}
          {user && user.role_name === 'admin' && (
            <div className="village-selector">
              <label className="user-controls">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô:</label>
              <select
                value={currentVillage?.village_id || ''}
                onChange={handleVillageChange}
                disabled={isLoading}
              >
                <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô --</option>
                {Array.isArray(villages) && villages.length > 0 ? (
                  villages.map(village => (
                    <option key={village.village_id} value={village.village_id}>
                      {village.village_name}
                    </option>
                  ))
                ) : (
                  <option value="" disabled>
                    {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...' : error ? error : '-- ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô --'}
                  </option>
                )}
              </select>
            </div>
          )}

          {/* ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Village Admin - ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö */}
          {user && user.role_name === 'village_admin' && currentVillage && (
            <div className="village-selector" >
              <label className="user-controls">‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô:</label>
              <span className="user-controls">{currentVillage.village_name}</span>
            </div>
          )}
          {user && (
            <div className="user-info">
              <span>{user.name}</span>
              <span className="role-badge">
                {user.role_name === 'admin' ? '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö' :
                  user.role_name === 'village_admin' ? '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô' :
                    user.role_name === 'meter' ? '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏î‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå' :
                      '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥'}
              </span>
            </div>
          )}
          <button className="logout-btn" onClick={onLogout}>‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</button>
        </div>
      </header>

      <div className="dashboard-content">
        <aside className={`sidebar ${isSidebarOpen ? 'open' : 'closed'}`}>
          <nav className="nav-menu">
            <ul>
              {Array.isArray(menuItems) && menuItems.length > 0 ? (
                menuItems.map(item => (
                  <li key={item.path}>
                    <Link
                      to={item.path}
                      className={`nav-link ${location.pathname === item.path ? 'active' : ''}`}
                    >
                      <span className="icon">{item.icon}</span>
                      {item.text}
                    </Link>
                  </li>
                ))
              ) : (
                <li className="nav-message">‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á</li>
              )}
            </ul>
          </nav>
        </aside>

        <main className="main-content">
          {children}
        </main>
      </div>
    </div>
  );
}

export default MainLayout;